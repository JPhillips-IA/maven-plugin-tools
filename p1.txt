Index: maven-plugin-tools-java5/src/test/java/source4/JavaExtractorTestThree.java
===================================================================
--- maven-plugin-tools-java5/src/test/java/source4/JavaExtractorTestThree.java	(revision 0)
+++ maven-plugin-tools-java5/src/test/java/source4/JavaExtractorTestThree.java	(revision 0)
@@ -0,0 +1,30 @@
+package source4;
+
+import org.apache.maven.plugin.AbstractMojo;
+import org.apache.maven.tools.plugin.Goal;
+import org.apache.maven.tools.plugin.Parameter;
+
+/**
+ * Tests the implementation argument of the parameter annotation.
+ */
+@Goal( name = "ideaThree", requiresDependencyResolutionScope = "compile" )
+public class JavaExtractorTestThree extends AbstractMojo
+{
+    /**
+     * Desc.
+     */
+    @Parameter( implementation = "source4.sub.MyBla", required = true )
+    private Bla bla;
+
+    public JavaExtractorTestThree()
+    {
+    }
+
+    public void execute()
+    {
+        if ( getLog() != null )
+        {
+            getLog().info( "bla: " + bla );
+        }
+    }
+}

Property changes on: maven-plugin-tools-java5/src/test/java/source4/JavaExtractorTestThree.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/test/java/source4/Bla.java
===================================================================
--- maven-plugin-tools-java5/src/test/java/source4/Bla.java	(revision 0)
+++ maven-plugin-tools-java5/src/test/java/source4/Bla.java	(revision 0)
@@ -0,0 +1,5 @@
+package source4;
+
+public interface Bla
+{
+}

Property changes on: maven-plugin-tools-java5/src/test/java/source4/Bla.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/test/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractorTest.java
===================================================================
--- maven-plugin-tools-java5/src/test/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractorTest.java	(revision 0)
+++ maven-plugin-tools-java5/src/test/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractorTest.java	(revision 0)
@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin.extractor.java;
+
+import java.io.File;
+import java.util.List;
+
+import org.apache.maven.model.Build;
+import org.apache.maven.model.Model;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.descriptor.Parameter;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
+import org.codehaus.plexus.PlexusTestCase;
+
+/**
+ * Test the ability to extract from Maven files.
+ * 
+ * @author eredmond
+ */
+public class JavaMojoAnnotationDescriptorExtractorTest extends PlexusTestCase
+{
+    public void testShouldFindTwoMojoDescriptors() throws Exception
+    {
+        JavaMojoAnnotationDescriptorExtractor extractor =
+            (JavaMojoAnnotationDescriptorExtractor) lookup( MojoDescriptorExtractor.ROLE, "java5" );
+
+        File dir = new File( "target/test-classes" );
+
+        Model model = new Model();
+        model.setArtifactId( "maven-unitTesting-plugin" );
+
+        MavenProject project = new MavenProject( model );
+
+        Build build = new Build();
+        build.setOutputDirectory( dir.getAbsolutePath() );
+
+        project.setBuild( build );
+        project.setFile( new File( new File( dir, "gen-pom" ), "pom.xml" ) );
+        project.addCompileSourceRoot( dir.getPath() );
+
+        System.out.println( dir.getAbsolutePath() );
+
+        PluginDescriptor pluginDescriptor = new PluginDescriptor();
+        pluginDescriptor.setGoalPrefix( "test" );
+        List results = extractor.execute( project, pluginDescriptor );
+        assertEquals( "Extracted mojos", 3, results.size() );
+
+        for ( int i = 0; i < 2; i++ )
+        {
+            MojoDescriptor mojoDescriptor = (MojoDescriptor) results.get( i );
+            assertEquals( 1, mojoDescriptor.getParameters().size() );
+            Parameter parameter = (Parameter) mojoDescriptor.getParameters().get( 0 );
+            assertEquals( "project", parameter.getName() );
+            assertEquals( "java.lang.String[]", parameter.getType() );
+        }
+
+        MojoDescriptor mojoDescriptor = (MojoDescriptor) results.get( 2 );
+        assertEquals( 1, mojoDescriptor.getParameters().size() );
+        Parameter parameter = (Parameter) mojoDescriptor.getParameters().get( 0 );
+        assertEquals( "bla", parameter.getName() );
+        assertEquals( "source4.Bla", parameter.getType() );
+    }
+}

Property changes on: maven-plugin-tools-java5/src/test/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractorTest.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/lifecycle/Phase.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/lifecycle/Phase.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/lifecycle/Phase.java	(revision 0)
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin.lifecycle;
+
+public enum Phase
+{
+    VALIDATE( "validate" ),
+    INITIALIZE( "initialize" ),
+    GENERATE_SOURCES( "generate-sources" ),
+    PROCESS_SOURCES( "process-sources" ),
+    GENERATE_RESOURCES( "generate-resources" ),
+    PROCESS_RESOURCES( "process-resources" ),
+    COMPILE( "compile" ),
+    PROCESS_CLASSES( "process-classes" ),
+    GENERATE_TEST_SOURCES( "generate-test-sources" ),
+    PROCESS_TEST_SOURCES( "process-test-sources" ),
+    GENERATE_TEST_RESOURCES( "generate-test-resources" ),
+    PROCESS_TEST_RESOURCES( "process-test-resources" ),
+    TEST_COMPILE( "test-compile" ),
+    PROCESS_TEST_CLASSES( "process-test-classes" ),
+    TEST( "test" ),
+    PREPARE_PACKAGE( "prepare-package" ),
+    PACKAGE( "package" ),
+    PRE_INTEGRATION_TEST( "pre-integration-test" ),
+    INTEGRATION_TEST( "integration-test" ),
+    POST_INTEGRATION_TEST( "post-integration-test" ),
+    VERIFY( "verify" ),
+    INSTALL( "install" ),
+    DEPLOY( "deploy" ),
+
+    PRE_CLEAN( "pre-clean" ),
+    CLEAN( "clean" ),
+    POST_CLEAN( "post-clean" ),
+
+    PRE_SITE( "pre-site" ),
+    SITE( "site" ),
+    POST_SITE( "post-site" ),
+    SITE_DEPLOY( "site-deploy" ),
+
+    VOID( "" );
+
+    private final String key;
+
+    Phase( String key )
+    {
+        this.key = key;
+    }
+
+    public String key()
+    {
+        return this.key;
+    }
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/lifecycle/Phase.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Parameter.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Parameter.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Parameter.java	(revision 0)
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+@Documented
+@Retention( RUNTIME )
+@Target( { FIELD, METHOD } )
+@Inherited
+public @interface Parameter
+{
+    String property() default "";
+
+    String alias() default "";
+
+    String expression() default "";
+
+    String defaultValue() default "";
+
+    String implementation() default "";
+
+    boolean required() default false;
+
+    boolean readonly() default false;
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Parameter.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Component.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Component.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Component.java	(revision 0)
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+@Documented
+@Retention( RUNTIME )
+@Target( { FIELD, METHOD } )
+@Inherited
+public @interface Component
+{
+    String role() default "";
+
+    String roleHint() default "";
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Component.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Execute.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Execute.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Execute.java	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import org.apache.maven.tools.plugin.lifecycle.Phase;
+
+@Documented
+@Retention( RUNTIME )
+@Target( TYPE )
+@Inherited
+public @interface Execute
+{
+    Phase phase() default Phase.VOID;
+
+    String goal() default "";
+
+    String lifecycle() default "";
+
+    String customPhase() default "";
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Execute.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Goal.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Goal.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Goal.java	(revision 0)
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import org.apache.maven.tools.plugin.lifecycle.Phase;
+
+@Documented
+@Retention( RUNTIME )
+@Target( TYPE )
+@Inherited
+public @interface Goal
+{
+    /**
+     * Goal name
+     * 
+     * @return
+     */
+    String name();
+
+    Phase defaultPhase() default Phase.VOID;
+
+    String requiresDependencyResolutionScope() default "runtime";
+
+    String instantiationStrategy() default "per-lookup";
+
+    String executionStrategy() default "once-per-session";
+
+    boolean requiresProject() default true;
+
+    boolean aggregator() default false;
+
+    boolean requiresDirectInvocation() default false;
+
+    boolean requiresOnline() default false;
+
+    boolean inheritByDefault() default true;
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/Goal.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractor.java
===================================================================
--- maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractor.java	(revision 0)
+++ maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractor.java	(revision 0)
@@ -0,0 +1,300 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.maven.tools.plugin.extractor.java;
+
+import java.io.File;
+import java.lang.reflect.Field;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.model.Resource;
+import org.apache.maven.plugin.Mojo;
+import org.apache.maven.plugin.descriptor.InvalidPluginDescriptorException;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.plugin.descriptor.Requirement;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.tools.plugin.Component;
+import org.apache.maven.tools.plugin.Execute;
+import org.apache.maven.tools.plugin.Goal;
+import org.apache.maven.tools.plugin.Parameter;
+import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
+import org.apache.maven.tools.plugin.lifecycle.Phase;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.util.DirectoryScanner;
+
+/**
+ * Extracts a plugin configuration from the source. Only works for inline literals, not constant variables.
+ * 
+ * @author Eric Redmond
+ * 
+ * @plexus.component role="org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor" role-hint="java5"
+ */
+public class JavaMojoAnnotationDescriptorExtractor extends AbstractLogEnabled implements MojoDescriptorExtractor
+{
+    private MojoDescriptor scan( ClassLoader cl, String className ) throws InvalidPluginDescriptorException
+    {
+        Class<?> c;
+
+        try
+        {
+            c = cl.loadClass( className );
+        }
+        catch ( ClassNotFoundException e )
+        {
+            throw new InvalidPluginDescriptorException( "Error scanning class " + className, e );
+        }
+
+        Goal goalAnno = c.getAnnotation( Goal.class );
+        if ( goalAnno == null )
+        {
+            getLogger().debug( "  Not a mojo: " + c.getName() );
+            return null;
+        }
+
+        MojoDescriptor mojoDescriptor = new MojoDescriptor();
+
+        mojoDescriptor.setRole( Mojo.ROLE );
+
+        mojoDescriptor.setImplementation( c.getName() );
+
+        mojoDescriptor.setLanguage( "java" );
+
+        mojoDescriptor.setInstantiationStrategy( goalAnno.instantiationStrategy() );
+
+        mojoDescriptor.setExecutionStrategy( goalAnno.executionStrategy() );
+
+        mojoDescriptor.setGoal( goalAnno.name() );
+
+        mojoDescriptor.setAggregator( goalAnno.aggregator() );
+
+        mojoDescriptor.setDependencyResolutionRequired( goalAnno.requiresDependencyResolutionScope() );
+
+        mojoDescriptor.setDirectInvocationOnly( goalAnno.requiresDirectInvocation() );
+
+        mojoDescriptor.setProjectRequired( goalAnno.requiresProject() );
+
+        mojoDescriptor.setOnlineRequired( goalAnno.requiresOnline() );
+
+        mojoDescriptor.setInheritedByDefault( goalAnno.inheritByDefault() );
+
+        if ( !Phase.VOID.equals( goalAnno.defaultPhase() ) )
+        {
+            mojoDescriptor.setPhase( goalAnno.defaultPhase().key() );
+        }
+
+        Deprecated deprecatedAnno = c.getAnnotation( Deprecated.class );
+
+        if ( deprecatedAnno != null )
+        {
+            mojoDescriptor.setDeprecated( "true" );
+        }
+
+        Execute executeAnno = c.getAnnotation( Execute.class );
+
+        if ( executeAnno != null )
+        {
+            String lifecycle = executeAnno.lifecycle();
+
+            mojoDescriptor.setExecuteLifecycle( nullify( lifecycle ) );
+
+            if ( Phase.VOID.equals( executeAnno.phase() ) )
+            {
+                mojoDescriptor.setExecutePhase( executeAnno.phase().key() );
+            }
+
+            String customPhase = executeAnno.customPhase();
+
+            if ( customPhase.length() > 0 )
+            {
+                if ( !Phase.VOID.equals( executeAnno.phase() ) )
+                {
+                    getLogger().warn( "Custom phase is overriding \"phase\" field." );
+                }
+                if ( lifecycle.length() == 0 )
+                {
+                    getLogger().warn(
+                                      "Setting a custom phase without a lifecycle is prone to error. If the phase is not custom, set the \"phase\" field instead." );
+                }
+                mojoDescriptor.setExecutePhase( executeAnno.customPhase() );
+            }
+
+            mojoDescriptor.setExecuteGoal( nullify( executeAnno.goal() ) );
+        }
+
+        Class<?> cur = c;
+        while ( !Object.class.equals( cur ) )
+        {
+            attachFieldParameters( cur, mojoDescriptor );
+
+            cur = cur.getSuperclass();
+        }
+
+        if ( getLogger().isDebugEnabled() )
+        {
+            getLogger().debug( "  Component found: " + mojoDescriptor.getHumanReadableKey() );
+        }
+
+        return mojoDescriptor;
+    }
+
+    private void attachFieldParameters( Class<?> cur, MojoDescriptor mojoDescriptor )
+        throws InvalidPluginDescriptorException
+    {
+        for ( Field f : cur.getDeclaredFields() )
+        {
+            org.apache.maven.plugin.descriptor.Parameter paramDescriptor =
+                new org.apache.maven.plugin.descriptor.Parameter();
+
+            paramDescriptor.setName( f.getName() );
+
+            Parameter paramAnno = f.getAnnotation( Parameter.class );
+
+            if ( paramAnno != null )
+            {
+                paramDescriptor.setAlias( nullify( paramAnno.alias() ) );
+
+                paramDescriptor.setDefaultValue( nullify( paramAnno.defaultValue() ) );
+
+                paramDescriptor.setEditable( !paramAnno.readonly() );
+
+                paramDescriptor.setExpression( nullify( paramAnno.expression() ) );
+
+                if ( "${reports}".equals( paramDescriptor.getExpression() ) )
+                {
+                    mojoDescriptor.setRequiresReports( true );
+                }
+
+                paramDescriptor.setImplementation( nullify( paramAnno.implementation() ) );
+
+                paramDescriptor.setRequired( paramAnno.required() );
+
+                String property = nullify( paramAnno.property() );
+
+                if ( property != null )
+                {
+                    paramDescriptor.setName( property );
+                }
+            }
+
+            Component componentAnno = f.getAnnotation( Component.class );
+
+            if ( componentAnno != null )
+            {
+                String role = nullify( componentAnno.role() );
+
+                if ( role == null )
+                {
+                    role = f.getType().getCanonicalName();
+                }
+
+                paramDescriptor.setRequirement( new Requirement( role, nullify( componentAnno.roleHint() ) ) );
+            }
+
+            if ( paramAnno != null || componentAnno != null )
+            {
+                paramDescriptor.setType( f.getType().getCanonicalName() );
+
+                mojoDescriptor.addParameter( paramDescriptor );
+            }
+        }
+    }
+
+    private String nullify( String value )
+    {
+        if ( value == null || value.trim().length() == 0 )
+        {
+            return null;
+        }
+        return value;
+    }
+
+    public List execute( MavenProject project, PluginDescriptor pluginDescriptor )
+        throws InvalidPluginDescriptorException
+    {
+        List descriptors = new ArrayList();
+
+        File classesDirectory = new File( project.getBuild().getOutputDirectory() );
+
+        DirectoryScanner scanner = new DirectoryScanner();
+        scanner.setBasedir( classesDirectory );
+        scanner.setIncludes( new String[] { "**/*.class" } );
+        scanner.scan();
+
+        List<URL> urls = new ArrayList<URL>();
+        for ( Artifact cpe : (Set<Artifact>) project.getArtifacts() ) // CompileClasspathElements() )
+        {
+            try
+            {
+                urls.add( cpe.getFile().toURL() ); // URI().toURL() );
+            }
+            catch ( MalformedURLException e )
+            {
+                getLogger().warn( "Cannot convert '" + cpe + "' to URL", e );
+            }
+        }
+        try
+        {
+            urls.add( new File( project.getBuild().getOutputDirectory() ).toURL() );
+        }
+        catch ( MalformedURLException e )
+        {
+            getLogger().warn( "Cannot convert '" + project.getBuild().getOutputDirectory() + "' to URL", e );
+        }
+
+        if ( getLogger().isDebugEnabled() )
+        {
+            getLogger().debug( "URLS: \n" + urls.toString().replaceAll( ",", "\n  " ) );
+        }
+        getLogger().info( "URLS: \n" + urls.toString().replaceAll( ",", "\n  " ) );
+
+        ClassLoader cl = new URLClassLoader( urls.toArray( new URL[urls.size()] ), getClass().getClassLoader() );
+
+        if ( getLogger().isDebugEnabled() )
+        {
+            getLogger().debug( "Scanning " + scanner.getIncludedFiles().length + " classes" );
+        }
+
+        for ( String file : scanner.getIncludedFiles() )
+        {
+            MojoDescriptor desc = scan( cl, file.substring( 0, file.lastIndexOf( ".class" ) ).replace( '/', '.' ) );
+            if ( desc != null )
+            {
+                desc.setPluginDescriptor( pluginDescriptor );
+                descriptors.add( desc );
+                getLogger().info( "Found mojo " + desc.getImplementation() );
+            }
+        }
+
+        Resource resource = new Resource();
+        resource.setDirectory( classesDirectory.getAbsolutePath() );
+        resource.setIncludes( Collections.EMPTY_LIST );
+        resource.setExcludes( Collections.EMPTY_LIST );
+
+        project.addResource( resource );
+
+        return descriptors;
+    }
+}

Property changes on: maven-plugin-tools-java5/src/main/java/org/apache/maven/tools/plugin/extractor/java/JavaMojoAnnotationDescriptorExtractor.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/main/resources/META-INF/plexus/components.xml
===================================================================
--- maven-plugin-tools-java5/src/main/resources/META-INF/plexus/components.xml	(revision 0)
+++ maven-plugin-tools-java5/src/main/resources/META-INF/plexus/components.xml	(revision 0)
@@ -0,0 +1,36 @@
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements.  See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership.  The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied.  See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<component-set>
+  <components>
+
+    <!--
+     |
+     | JavaMojoDescriptorExtractor, a MojoDescriptor extractor to read
+     | descriptors from java sources.
+     |
+     -->
+    <component>
+      <role>org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor</role>
+      <implementation>org.apache.maven.tools.plugin.extractor.java.JavaMojoAnnotationDescriptorExtractor</implementation>
+      <role-hint>java5</role-hint>
+    </component>
+
+  </components>
+</component-set>

Property changes on: maven-plugin-tools-java5/src/main/resources/META-INF/plexus/components.xml
___________________________________________________________________
Name: svn:mime-type
   + text/xml
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/projects/maven-echo-dep/src/main/java/com/training/Values.java
===================================================================
--- maven-plugin-tools-java5/src/projects/maven-echo-dep/src/main/java/com/training/Values.java	(revision 0)
+++ maven-plugin-tools-java5/src/projects/maven-echo-dep/src/main/java/com/training/Values.java	(revision 0)
@@ -0,0 +1,6 @@
+package com.training;
+
+public class Values
+{
+	public static final String GOAL_NAME = "echo";
+}

Property changes on: maven-plugin-tools-java5/src/projects/maven-echo-dep/src/main/java/com/training/Values.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/projects/maven-echo-dep/pom.xml
===================================================================
--- maven-plugin-tools-java5/src/projects/maven-echo-dep/pom.xml	(revision 0)
+++ maven-plugin-tools-java5/src/projects/maven-echo-dep/pom.xml	(revision 0)
@@ -0,0 +1,7 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>com.training.plugins</groupId>
+  <artifactId>mojo-echo-dep</artifactId>
+  <version>1.0-SNAPSHOT</version>
+</project>

Property changes on: maven-plugin-tools-java5/src/projects/maven-echo-dep/pom.xml
___________________________________________________________________
Name: svn:mime-type
   + text/xml
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/src/projects/maven-echo-plugin/src/main/java/com/training/plugins/MyMojo.java
===================================================================
--- maven-plugin-tools-java5/src/projects/maven-echo-plugin/src/main/java/com/training/plugins/MyMojo.java	(revision 0)
+++ maven-plugin-tools-java5/src/projects/maven-echo-plugin/src/main/java/com/training/plugins/MyMojo.java	(revision 0)
@@ -0,0 +1,41 @@
+package com.training.plugins;
+
+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.maven.plugin.AbstractMojo;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.tools.plugin.Goal;
+import org.apache.maven.tools.plugin.Parameter;
+import org.apache.maven.tools.plugin.lifecycle.Phase;
+import com.training.Values;
+
+/**
+ * Echos an input toString to the log.
+ */
+@Goal(name=Values.GOAL_NAME, defaultPhase=Phase.PROCESS_SOURCES)
+public class MyMojo
+    extends AbstractMojo
+{
+    @Parameter(expression="${echo.message}", defaultValue="<ECHO Echo echo...>")
+    private Object message;
+
+    public void execute()
+        throws MojoExecutionException
+    {
+    	getLog().info( message.toString() );
+    }
+}

Property changes on: maven-plugin-tools-java5/src/projects/maven-echo-plugin/src/main/java/com/training/plugins/MyMojo.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id

Index: maven-plugin-tools-java5/src/projects/maven-echo-plugin/pom.xml
===================================================================
--- maven-plugin-tools-java5/src/projects/maven-echo-plugin/pom.xml	(revision 0)
+++ maven-plugin-tools-java5/src/projects/maven-echo-plugin/pom.xml	(revision 0)
@@ -0,0 +1,59 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>com.training.plugins</groupId>
+  <artifactId>maven-echo-plugin</artifactId>
+  <version>1.0-SNAPSHOT</version>
+  <name>maven-echo-plugin Maven Mojo</name>
+  <url>http://maven.apache.org</url>
+  <dependencies>
+    <dependency>
+      <groupId>org.apache.maven</groupId>
+      <artifactId>maven-plugin-tools-java5</artifactId>
+      <version>2.2-SNAPSHOT</version>
+    </dependency>
+    <dependency>
+      <groupId>com.training.plugins</groupId>
+      <artifactId>mojo-dep</artifactId>
+      <version>1.0-SNAPSHOT</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <artifactId>maven-plugin-plugin</artifactId>
+        <version>2.4-SNAPSHOT</version>
+        <dependencies>
+          <dependency>
+            <groupId>org.apache.maven</groupId>
+            <artifactId>maven-plugin-tools-java5</artifactId>
+            <version>2.2-SNAPSHOT</version>
+          </dependency>
+        </dependencies>
+        <executions>
+          <execution>
+            <phase>process-classes</phase>
+            <goals>
+              <goal>post-compile-descriptor</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+  <repositories>
+    <repository>
+      <id>sonatype.repos</id>
+      <url>http://labs.sonatype.org/repository</url>
+    </repository>
+  </repositories>
+</project>

Property changes on: maven-plugin-tools-java5/src/projects/maven-echo-plugin/pom.xml
___________________________________________________________________
Name: svn:mime-type
   + text/xml
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native

Index: maven-plugin-tools-java5/pom.xml
===================================================================
--- maven-plugin-tools-java5/pom.xml	(revision 0)
+++ maven-plugin-tools-java5/pom.xml	(revision 0)
@@ -0,0 +1,101 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one
+  ~ or more contributor license agreements.  See the NOTICE file
+  ~ distributed with this work for additional information
+  ~ regarding copyright ownership.  The ASF licenses this file
+  ~ to you under the Apache License, Version 2.0 (the
+  ~ "License"); you may not use this file except in compliance
+  ~ with the License.  You may obtain a copy of the License at
+  ~
+  ~   http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing,
+  ~ software distributed under the License is distributed on an
+  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  ~ KIND, either express or implied.  See the License for the
+  ~ specific language governing permissions and limitations
+  ~ under the License.
+  -->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <parent>
+    <groupId>org.apache.maven</groupId>
+    <artifactId>maven-plugin-tools</artifactId>
+    <version>2.2-SNAPSHOT</version>
+  </parent>
+  <modelVersion>4.0.0</modelVersion>
+  <artifactId>maven-plugin-tools-java5</artifactId>
+  <name>Maven Plugin Tools for Java 5</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>org.apache.maven</groupId>
+      <artifactId>maven-plugin-tools-api</artifactId>
+      <version>2.2-SNAPSHOT</version>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.plexus</groupId>
+      <artifactId>plexus-container-default</artifactId>
+      <version>1.0-alpha-25-SNAPSHOT</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.maven</groupId>
+      <artifactId>maven-project</artifactId>
+      <version>2.1-SNAPSHOT</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.maven</groupId>
+      <artifactId>maven-plugin-descriptor</artifactId>
+      <version>2.1-SNAPSHOT</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+<!--
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+        <artifactId>wagon-webdav</artifactId>
+        <version>1.0-beta-2</version>
+      </extension>
+    </extensions>
+-->
+    <plugins>
+      <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+  <profiles>
+    <profile>
+    <id>it</id>
+    <build>
+      <plugins>
+        <plugin>
+        <artifactId>maven-invoker-plugin</artifactId>
+        <configuration>
+          <streamLogs>true</streamLogs>
+        </configuration>
+        <executions>
+          <execution>
+            <id>echo</id>
+            <phase>integration-test</phase>
+            <goals>
+              <goal>run</goal>
+            </goals>
+          </execution>
+        </executions>
+        </plugin>
+      </plugins>
+    </build>
+    </profile>
+  </profiles>
+</project>

Property changes on: maven-plugin-tools-java5/pom.xml
___________________________________________________________________
Name: svn:mime-type
   + text/xml
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native


