Index: /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/AbstractGeneratorMojo.java
===================================================================
--- /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/AbstractGeneratorMojo.java	(revision 544673)
+++ /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/AbstractGeneratorMojo.java	(working copy)
@@ -37,12 +37,11 @@
  * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
  * @version $Id$
  */
-public abstract class AbstractGeneratorMojo
-    extends AbstractMojo
+public abstract class AbstractGeneratorMojo extends AbstractMojo
 {
     /**
      * The project currently being built.
-     *
+     * 
      * @parameter expression="${project}"
      * @required
      */
@@ -50,7 +49,7 @@
 
     /**
      * The component used for scanning the source tree for mojos.
-     *
+     * 
      * @parameter expression="${component.org.apache.maven.tools.plugin.scanner.MojoScanner}"
      * @required
      */
@@ -58,19 +57,15 @@
 
     /**
      * The goal prefix that will appear before the ":".
-     *
+     * 
      * @parameter
      */
     protected String goalPrefix;
 
     /**
-     * The names of extractors to use.
-     * <p/>
-     * If not set, all extractors will be used. If set to an empty extractor name, no extractors
-     * will be used.
-     * <p/>
-     * Example:
-     * <p/>
+     * The names of extractors to use. <p/> If not set, all extractors will be used. If set to an empty extractor name,
+     * no extractors will be used. <p/> Example: <p/>
+     * 
      * <pre>
      *  &lt;!-- Use all extractors --&gt;
      *  &lt;extractors/&gt;
@@ -83,7 +78,7 @@
      *      &lt;extractor&gt;bsh&lt;/extractor&gt;
      *  &lt;/extractors&gt;
      * </pre>
-     *
+     * 
      * @parameter
      */
     protected Set/* <String> */extractors;
@@ -92,14 +87,17 @@
 
     protected abstract Generator createGenerator();
 
-    public void execute()
-        throws MojoExecutionException
+    protected void instrumentProject( MavenProject project )
     {
-        if ( !project.getPackaging().equals( "maven-plugin" ) )
-        {
-            return;
-        }
+    }
 
+    public void execute() throws MojoExecutionException
+    {
+        // if ( !project.getPackaging().equals( "maven-plugin" ) )
+        // {
+        // return;
+        // }
+
         String defaultGoalPrefix = PluginDescriptor.getGoalPrefixFromArtifactId( project.getArtifactId() );
         if ( goalPrefix == null )
         {
@@ -107,8 +105,7 @@
         }
         else
         {
-            getLog().warn(
-                "Goal prefix is: " + goalPrefix + "; Maven currently expects it to be " + defaultGoalPrefix );
+            getLog().warn( "Goal prefix is: " + goalPrefix + "; Maven currently expects it to be " + defaultGoalPrefix );
         }
 
         mojoScanner.setActiveExtractors( extractors );
@@ -132,6 +129,8 @@
         {
             pluginDescriptor.setDependencies( PluginUtils.toComponentDependencies( project.getRuntimeDependencies() ) );
 
+            instrumentProject( project );
+
             mojoScanner.populatePluginDescriptor( project, pluginDescriptor );
 
             getOutputDirectory().mkdirs();
@@ -144,12 +143,14 @@
         }
         catch ( InvalidPluginDescriptorException e )
         {
-            throw new MojoExecutionException( "Error extracting plugin descriptor: \'" + e.getLocalizedMessage() + "\'",
+            throw new MojoExecutionException(
+                                              "Error extracting plugin descriptor: \'" + e.getLocalizedMessage() + "\'",
                                               e );
         }
         catch ( ExtractionException e )
         {
-            throw new MojoExecutionException( "Error extracting plugin descriptor: \'" + e.getLocalizedMessage() + "\'",
+            throw new MojoExecutionException(
+                                              "Error extracting plugin descriptor: \'" + e.getLocalizedMessage() + "\'",
                                               e );
         }
     }
Index: /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PostCompileDescriptorGeneratorMojo.java
===================================================================
--- /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PostCompileDescriptorGeneratorMojo.java	(revision 0)
+++ /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PostCompileDescriptorGeneratorMojo.java	(revision 0)
@@ -0,0 +1,156 @@
+package org.apache.maven.plugin.plugin;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.io.File;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolver;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.tools.plugin.generator.Generator;
+import org.apache.maven.tools.plugin.generator.PluginDescriptorGenerator;
+
+/**
+ * Generate a plugin descriptor after compilation
+ * 
+ * @goal post-compile-descriptor
+ * @phase process-classes
+ */
+public class PostCompileDescriptorGeneratorMojo extends AbstractGeneratorMojo
+{
+    /**
+     * Used to look up Artifacts in the remote repository.
+     * 
+     * @component
+     * @required
+     * @readonly
+     */
+    protected ArtifactFactory artifactFactory;
+
+    /**
+     * Used to look up Artifacts in the remote repository.
+     * 
+     * @component
+     * @required
+     * @readonly
+     */
+    protected ArtifactResolver artifactResolver;
+
+    /**
+     * Location of the local repository.
+     * 
+     * @parameter expression="${localRepository}"
+     * @readonly
+     * @required
+     */
+    protected ArtifactRepository localRepository;
+
+    /**
+     * List of Remote Repositories used by the resolver
+     * 
+     * @parameter expression="${project.remoteArtifactRepositories}"
+     * @readonly
+     * @required
+     */
+    protected List remoteRepositories;
+
+    /**
+     * The directory where the generated plugin.xml file will be put.
+     * 
+     * @parameter expression="${project.build.outputDirectory}/META-INF/maven"
+     * @required
+     */
+    protected File outputDirectory;
+
+    /**
+     * List of project's dependencies
+     * 
+     * @parameter expression="${project.dependencies}"
+     * @readonly
+     * @required
+     */
+    protected List dependencies;
+
+    protected File getOutputDirectory()
+    {
+        return outputDirectory;
+    }
+
+    protected Generator createGenerator()
+    {
+        return new PluginDescriptorGenerator();
+    }
+
+    protected void instrumentProject( MavenProject project )
+    {
+        try
+        {
+            Set artifacts = new TreeSet();
+
+            for ( Iterator iterator = dependencies.iterator(); iterator.hasNext(); )
+            {
+                Dependency d = (Dependency) iterator.next();
+
+                Artifact artifact =
+                    artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
+                                                              VersionRange.createFromVersion( d.getVersion() ),
+                                                              d.getType(), d.getClassifier(), d.getScope() );
+
+                if ( Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )
+                {
+                    File systemFile = artifact.getFile();
+
+                    if ( !systemFile.exists() )
+                    {
+                        throw new ArtifactNotFoundException( "System artifact: " + artifact + " not found in path: "
+                                        + systemFile, artifact );
+                    }
+                    else
+                    {
+                        artifact.setResolved( true );
+                    }
+                }
+                else if ( !artifact.isResolved() )
+                {
+                    String localPath = localRepository.pathOf( artifact );
+
+                    artifact.setFile( new File( localRepository.getBasedir(), localPath ) );
+                }
+
+                artifacts.add( artifact );
+            }
+
+            project.setArtifacts( artifacts );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            e.printStackTrace();
+        }
+    }
+}

Property changes on: /Users/eredmond/Svn/maven/trunks/plugins/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PostCompileDescriptorGeneratorMojo.java
___________________________________________________________________
Name: svn:mime-type
   + text/x-java
Name: svn:keywords
   + Date Revision Author HeadURL Id
Name: svn:eol-style
   + native


